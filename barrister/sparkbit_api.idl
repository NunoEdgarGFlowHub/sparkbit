// JSON-RPC 2.0
// Parameters are passed by position, parameter names are capitalized for Java generated code
// Barrister IDL does not have dictionary/map type structure
// Method names are all lowercase so easier to type
// Java class names and methods follow Java convention

// Syncing and last seen block is actually on a per wallet basis rather than system-wide
struct JSONRPCWalletStatus {
	name string
	synced bool
	blocks int
}
struct JSONRPCStatusResponse {
	connected bool
	wallets []JSONRPCWalletStatus
}

struct JSONRPCAddressBookEntry {
	label string
	bitcoin_address string
	coinspark_address string
}

struct JSONRPCTransactionAmount {
	assetref string
	raw int
	qty float
	display string
	name string
	name_short string
}

struct JSONRPCTransaction {
	unixtime int
	confirmations int
	incoming bool
	amounts []JSONRPCTransactionAmount
	fee float [optional]
	txid string
	receive_address string
	}

struct JSONRPCBalanceAmount {
	raw int
	qty float
	display string
	}

// If we subclass with JSONRPCAssetBalance, the returned json is treated as parent class so fields are missing
struct JSONRPCBalance {
	assetref string
	balance JSONRPCBalanceAmount
	spendable JSONRPCBalanceAmount
	name string [optional]
	name_short string [optional]
	domain string [optional]
	url string [optional]
	issuer string [optional]
	description string [optional]
	units string [optional]
	multiple float [optional]
	status string [optional]
	valid bool [optional]
	checked_unixtime int [optional]
	contract_url string [optional]
	contract_file string [optional]
	genesis_txid string [optional]
	added_unixtime int [optional]
	issue_date string [optional]
	issue_unixtime int [optional]
	expiry_date string [optional]
	expiry_unixtime int [optional]
	tracker_urls []string [optional]
	icon_url string [optional]
	image_url string [optional]
	feed_url string [optional]
	redemption_url string [optional]
	visible bool [optional]
}

interface sparkbit {
	createwallet(walletname string) bool
  	sendasset(walletname string, address string, assetref string, quantity float, senderpays bool) string
  	// string is the hash of successful transaction
  	// rounding mode could be a parameter? but we currently ROUND DOWN in our code.

	getstatus() JSONRPCStatusResponse
	listwallets() []string
	deletewallet(walletname string) bool
	setassetvisible(walletname string, assetref string, visibility bool) bool
	addasset(walletname string, assetref string) bool
	refreshasset(walletname string, assetref string) bool
	listaddresses(walletname string) []JSONRPCAddressBookEntry
	createaddress(walletname string, quantity int) []JSONRPCAddressBookEntry
	setaddresslabel(walletname string, address string, label string) bool
  	listtransactions(walletname string, limit int) []JSONRPCTransaction
	listbalances(walletname string, onlyvisible bool) []JSONRPCBalance
  	sendbitcoin(walletname string, address string, amount float) string
}

