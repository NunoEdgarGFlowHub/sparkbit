/*
 * SparkBit
 *
 * Copyright 2015 Coin Sciences Ltd
 *
 * Licensed under the MIT license (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://opensource.org/licenses/mit-license.php
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.multibit.viewsystem.swing.view.panels;

import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.net.URLEncoder;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import org.multibit.viewsystem.swing.ColorAndFontConstants;
import org.multibit.viewsystem.swing.view.components.FontSizer;

/**
 * This panel displays the list of messaging servers to use in a table.
 * Users can add and remove servers from the list.
 * @author Simon
 */
public class CSMessagingServerPanel extends javax.swing.JPanel {

    private final DefaultTableModel tableModel;
    
    /**
     * Creates new form CSMessagingServerPanel
     */
    public CSMessagingServerPanel() {
	tableModel = computeDefaultTableModel();
	
	initComponents();
	
	// Create a list selection listener
	table.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
	    @Override
	    public void valueChanged(ListSelectionEvent e) {
		updateRemoveButton();
	    }
	});
	
	table.getTableHeader().setFont(FontSizer.INSTANCE.getAdjustedDefaultFont());
	// TODO: cell editor font
    }

    /**
     * Create the default table model to use
     * @return DefaultTableModel
     */
    private DefaultTableModel computeDefaultTableModel() {
	Object[] columnNames = {"URL"};
	Object[][] data = {};
	return new DefaultTableModel(data, columnNames);
    }
    
    /**
     * Enable or disable remote button
     */
    private void updateRemoveButton() {
	removeButton.setEnabled(!table.getSelectionModel().isSelectionEmpty());
    }

    /**
     * Set the URLs of the data model, remove any existing URLs.
     * @param urls Expected to be application/x-www-form-urlencoded using UTF-8
     */
    public void setURLs(String[] urls) {
	tableModel.setRowCount(0);
	for (String url : urls) {
	    try {
		String decoded = URLDecoder.decode(url, "UTF-8");
		tableModel.addRow(new Object[]{decoded});
	    } catch (UnsupportedEncodingException e) {
		// don't add it
	    }
	}
	updateRemoveButton();
    }
    
    /**
     * Return the URLs encoded as application/x-www-form-urlencoded using UTF-8
     * @return null if no URLs, rather than an empty list
     */
    public String[] getURLs() {
	int n = tableModel.getRowCount();
	if (n==0) return null;
	String[] urls = new String[n];
	for (int i=0; i<n; i++) {
	    String s = (String) tableModel.getValueAt(i, 0);
	    try {
	    String encoded = URLEncoder.encode(s, "UTF-8");
	    urls[i] = encoded;
	    } catch (UnsupportedEncodingException e) {
		urls[i] = "Invalid characters in URL";
	    }
	}
	return urls;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        label = new javax.swing.JLabel();
        scrollPane = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        addButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();

        setBackground(ColorAndFontConstants.VERY_LIGHT_BACKGROUND_COLOR);
        setName("Messaging Delivery Servers"); // NOI18N

        label.setFont(FontSizer.INSTANCE.getAdjustedDefaultFont());
        label.setText("Servers are tried in random order. If none listed, default are used.");

        scrollPane.setBackground(ColorAndFontConstants.VERY_LIGHT_BACKGROUND_COLOR);
        scrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        table.setFont(FontSizer.INSTANCE.getAdjustedDefaultFont());
        table.setModel(tableModel);
        table.setRowHeight(FontSizer.INSTANCE.getAdjustedDefaultFont().getSize());
        table.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        scrollPane.setViewportView(table);

        addButton.setFont(FontSizer.INSTANCE.getAdjustedDefaultFont());
        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        removeButton.setFont(FontSizer.INSTANCE.getAdjustedDefaultFont());
        removeButton.setText("Remove");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(removeButton))
                    .addComponent(scrollPane))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addButton)
                    .addComponent(removeButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // TODO add your handling code here:
	DefaultTableModel model = (DefaultTableModel) table.getModel();
	model.addRow(new Object[]{"<< Double-click to edit URL >>"});
    }//GEN-LAST:event_addButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        // TODO add your handling code here:
	DefaultTableModel model = (DefaultTableModel) table.getModel();
	int index = table.getSelectedRow();
	model.removeRow(index);
    }//GEN-LAST:event_removeButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JLabel label;
    private javax.swing.JButton removeButton;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
