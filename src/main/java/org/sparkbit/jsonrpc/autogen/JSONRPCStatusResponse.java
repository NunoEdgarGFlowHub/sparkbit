package org.sparkbit.jsonrpc.autogen;

/**
 * DO NOT EDIT THIS FILE!
 * 
 * Generated by Barrister Idl2Java: https://github.com/coopernurse/barrister-java
 * 
 * Generated at: Tue Nov 18 18:51:54 PST 2014
 */
public class JSONRPCStatusResponse implements com.bitmechanic.barrister.BStruct {


    public static class Builder {
        private Boolean _connected;
        public Builder connected(Boolean connected) { this._connected = connected; return this; }
        private JSONRPCWalletStatus[] _wallets;
        public Builder wallets(JSONRPCWalletStatus[] wallets) { this._wallets = wallets; return this; }
        public JSONRPCStatusResponse build() {
            return new JSONRPCStatusResponse(this._connected, this._wallets);
        }

        public Builder() { }
        public Builder(JSONRPCStatusResponse obj) {
            this._connected = obj.getConnected();
            this._wallets = obj.getWallets();
        }
    }

    private JSONRPCWalletStatus[] wallets;
    private Boolean connected;

    public JSONRPCStatusResponse() {
        super();
    }

    public JSONRPCStatusResponse(java.util.Map _map) throws com.bitmechanic.barrister.RpcException {
        this(
            (Boolean)com.bitmechanic.barrister.BoolTypeConverter.unmarshal(_map.get("connected"), false),
            (JSONRPCWalletStatus[])com.bitmechanic.barrister.ArrayTypeConverter.unmarshalList(JSONRPCWalletStatus.class, _map.get("wallets"), false)
        );
    }

    @org.codehaus.jackson.annotate.JsonCreator
    public JSONRPCStatusResponse(
            @org.codehaus.jackson.annotate.JsonProperty("connected") Boolean connected, 
            @org.codehaus.jackson.annotate.JsonProperty("wallets") JSONRPCWalletStatus[] wallets) {
        super();
        this.connected = connected;
        this.wallets = wallets;
    }

    public void setWallets(JSONRPCWalletStatus[] wallets) {
        this.wallets = wallets;
    }

    public JSONRPCWalletStatus[] getWallets() {
        return this.wallets;
    }

    public void setConnected(Boolean connected) {
        this.connected = connected;
    }

    public Boolean getConnected() {
        return this.connected;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("JSONRPCStatusResponse:");
        sb.append(" wallets=").append(wallets);
        sb.append(" connected=").append(connected);
        return sb.toString();
    }

    @Override
    public boolean equals(Object _other) {
        if (this == _other) { return true; }
        if (_other == null) { return false; }
        if (!(_other instanceof JSONRPCStatusResponse)) { return false; }
        JSONRPCStatusResponse _o = (JSONRPCStatusResponse)_other;
        if (wallets == null && _o.wallets != null) { return false; }
        else if (wallets != null && !java.util.Arrays.equals(wallets, _o.wallets)) { return false; }
        if (connected == null && _o.connected != null) { return false; }
        else if (connected != null && !connected.equals(_o.connected)) { return false; }
        return true;
    }

    @Override
    public int hashCode() {
        int _hash = 1;
        _hash = _hash * 31 + (wallets == null ? 0 : java.util.Arrays.hashCode(wallets));
        _hash = _hash * 31 + (connected == null ? 0 : connected.hashCode());
        return _hash;
    }
}

