package org.sparkbit.jsonrpc.autogen;

/**
 * DO NOT EDIT THIS FILE!
 * 
 * Generated by Barrister Idl2Java: https://github.com/coopernurse/barrister-java
 * 
 * Generated at: Wed Nov 12 12:35:36 PST 2014
 */
public class JSONRPCWallet implements com.bitmechanic.barrister.BStruct {


    public static class Builder {
        private String _walletID;
        public Builder walletID(String walletID) { this._walletID = walletID; return this; }
        public JSONRPCWallet build() {
            return new JSONRPCWallet(this._walletID);
        }

        public Builder() { }
        public Builder(JSONRPCWallet obj) {
            this._walletID = obj.getWalletID();
        }
    }

    private String walletID;

    public JSONRPCWallet() {
        super();
    }

    public JSONRPCWallet(java.util.Map _map) throws com.bitmechanic.barrister.RpcException {
        this(
            (String)com.bitmechanic.barrister.StringTypeConverter.unmarshal(_map.get("walletID"), false)
        );
    }

    @org.codehaus.jackson.annotate.JsonCreator
    public JSONRPCWallet(
            @org.codehaus.jackson.annotate.JsonProperty("walletID") String walletID) {
        super();
        this.walletID = walletID;
    }

    public void setWalletID(String walletID) {
        this.walletID = walletID;
    }

    public String getWalletID() {
        return this.walletID;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("JSONRPCWallet:");
        sb.append(" walletID=").append(walletID);
        return sb.toString();
    }

    @Override
    public boolean equals(Object _other) {
        if (this == _other) { return true; }
        if (_other == null) { return false; }
        if (!(_other instanceof JSONRPCWallet)) { return false; }
        JSONRPCWallet _o = (JSONRPCWallet)_other;
        if (walletID == null && _o.walletID != null) { return false; }
        else if (walletID != null && !walletID.equals(_o.walletID)) { return false; }
        return true;
    }

    @Override
    public int hashCode() {
        int _hash = 1;
        _hash = _hash * 31 + (walletID == null ? 0 : walletID.hashCode());
        return _hash;
    }
}

