package org.sparkbit.jsonrpc.autogen;

/**
 * DO NOT EDIT THIS FILE!
 * 
 * Generated by Barrister Idl2Java: https://github.com/coopernurse/barrister-java
 * 
 * Generated at: Fri Nov 14 18:54:32 PST 2014
 */
public class sparkbitClient implements sparkbit {

    private com.bitmechanic.barrister.Transport _trans;

    public sparkbitClient(com.bitmechanic.barrister.Transport trans) {
        trans.getContract().setPackage("org.sparkbit.jsonrpc.autogen");
        trans.getContract().setNsPackage("org.sparkbit.jsonrpc.autogen");
        this._trans = trans;
    }

    public Boolean createwallet(String walletID) throws com.bitmechanic.barrister.RpcException {
        Object _params = new Object[] { walletID };
        com.bitmechanic.barrister.RpcRequest _req = new com.bitmechanic.barrister.RpcRequest(java.util.UUID.randomUUID().toString(), "sparkbit.createwallet", _params);
        com.bitmechanic.barrister.RpcResponse _resp = this._trans.request(_req);
        if (_resp == null) {
            return null;
        }
        else if (_resp.getError() == null) {
            return (Boolean)_resp.getResult();
        }
        else {
            throw _resp.getError();
        }
    }

    public String sendasset(String walletID, String address, String assetRef, Double quantity, Boolean senderPays) throws com.bitmechanic.barrister.RpcException {
        Object _params = new Object[] { walletID, address, assetRef, quantity, senderPays };
        com.bitmechanic.barrister.RpcRequest _req = new com.bitmechanic.barrister.RpcRequest(java.util.UUID.randomUUID().toString(), "sparkbit.sendasset", _params);
        com.bitmechanic.barrister.RpcResponse _resp = this._trans.request(_req);
        if (_resp == null) {
            return null;
        }
        else if (_resp.getError() == null) {
            return (String)_resp.getResult();
        }
        else {
            throw _resp.getError();
        }
    }

    public JSONRPCStatusResponse getstatus() throws com.bitmechanic.barrister.RpcException {
        Object _params = null;
        com.bitmechanic.barrister.RpcRequest _req = new com.bitmechanic.barrister.RpcRequest(java.util.UUID.randomUUID().toString(), "sparkbit.getstatus", _params);
        com.bitmechanic.barrister.RpcResponse _resp = this._trans.request(_req);
        if (_resp == null) {
            return null;
        }
        else if (_resp.getError() == null) {
            return (JSONRPCStatusResponse)_resp.getResult();
        }
        else {
            throw _resp.getError();
        }
    }

    public String[] listwallets() throws com.bitmechanic.barrister.RpcException {
        Object _params = null;
        com.bitmechanic.barrister.RpcRequest _req = new com.bitmechanic.barrister.RpcRequest(java.util.UUID.randomUUID().toString(), "sparkbit.listwallets", _params);
        com.bitmechanic.barrister.RpcResponse _resp = this._trans.request(_req);
        if (_resp == null) {
            return null;
        }
        else if (_resp.getError() == null) {
            return (String[])_resp.getResult();
        }
        else {
            throw _resp.getError();
        }
    }

    public Boolean deletewallet(String walletID) throws com.bitmechanic.barrister.RpcException {
        Object _params = new Object[] { walletID };
        com.bitmechanic.barrister.RpcRequest _req = new com.bitmechanic.barrister.RpcRequest(java.util.UUID.randomUUID().toString(), "sparkbit.deletewallet", _params);
        com.bitmechanic.barrister.RpcResponse _resp = this._trans.request(_req);
        if (_resp == null) {
            return null;
        }
        else if (_resp.getError() == null) {
            return (Boolean)_resp.getResult();
        }
        else {
            throw _resp.getError();
        }
    }

    public Boolean setassetvisible(String walletID, String assetRef, Boolean visibility) throws com.bitmechanic.barrister.RpcException {
        Object _params = new Object[] { walletID, assetRef, visibility };
        com.bitmechanic.barrister.RpcRequest _req = new com.bitmechanic.barrister.RpcRequest(java.util.UUID.randomUUID().toString(), "sparkbit.setassetvisible", _params);
        com.bitmechanic.barrister.RpcResponse _resp = this._trans.request(_req);
        if (_resp == null) {
            return null;
        }
        else if (_resp.getError() == null) {
            return (Boolean)_resp.getResult();
        }
        else {
            throw _resp.getError();
        }
    }

    public Boolean addasset(String walletID, String assetRef) throws com.bitmechanic.barrister.RpcException {
        Object _params = new Object[] { walletID, assetRef };
        com.bitmechanic.barrister.RpcRequest _req = new com.bitmechanic.barrister.RpcRequest(java.util.UUID.randomUUID().toString(), "sparkbit.addasset", _params);
        com.bitmechanic.barrister.RpcResponse _resp = this._trans.request(_req);
        if (_resp == null) {
            return null;
        }
        else if (_resp.getError() == null) {
            return (Boolean)_resp.getResult();
        }
        else {
            throw _resp.getError();
        }
    }

    public Boolean refreshasset(String walletID, String assetRef) throws com.bitmechanic.barrister.RpcException {
        Object _params = new Object[] { walletID, assetRef };
        com.bitmechanic.barrister.RpcRequest _req = new com.bitmechanic.barrister.RpcRequest(java.util.UUID.randomUUID().toString(), "sparkbit.refreshasset", _params);
        com.bitmechanic.barrister.RpcResponse _resp = this._trans.request(_req);
        if (_resp == null) {
            return null;
        }
        else if (_resp.getError() == null) {
            return (Boolean)_resp.getResult();
        }
        else {
            throw _resp.getError();
        }
    }

    public JSONRPCAddressBookEntry[] listaddresses(String walletID) throws com.bitmechanic.barrister.RpcException {
        Object _params = new Object[] { walletID };
        com.bitmechanic.barrister.RpcRequest _req = new com.bitmechanic.barrister.RpcRequest(java.util.UUID.randomUUID().toString(), "sparkbit.listaddresses", _params);
        com.bitmechanic.barrister.RpcResponse _resp = this._trans.request(_req);
        if (_resp == null) {
            return null;
        }
        else if (_resp.getError() == null) {
            return (JSONRPCAddressBookEntry[])_resp.getResult();
        }
        else {
            throw _resp.getError();
        }
    }

    public JSONRPCAddressBookEntry[] createaddress(String walletID, Long quantity) throws com.bitmechanic.barrister.RpcException {
        Object _params = new Object[] { walletID, quantity };
        com.bitmechanic.barrister.RpcRequest _req = new com.bitmechanic.barrister.RpcRequest(java.util.UUID.randomUUID().toString(), "sparkbit.createaddress", _params);
        com.bitmechanic.barrister.RpcResponse _resp = this._trans.request(_req);
        if (_resp == null) {
            return null;
        }
        else if (_resp.getError() == null) {
            return (JSONRPCAddressBookEntry[])_resp.getResult();
        }
        else {
            throw _resp.getError();
        }
    }

    public Boolean setaddresslabel(String walletID, String address, String label) throws com.bitmechanic.barrister.RpcException {
        Object _params = new Object[] { walletID, address, label };
        com.bitmechanic.barrister.RpcRequest _req = new com.bitmechanic.barrister.RpcRequest(java.util.UUID.randomUUID().toString(), "sparkbit.setaddresslabel", _params);
        com.bitmechanic.barrister.RpcResponse _resp = this._trans.request(_req);
        if (_resp == null) {
            return null;
        }
        else if (_resp.getError() == null) {
            return (Boolean)_resp.getResult();
        }
        else {
            throw _resp.getError();
        }
    }

    public JSONRPCTransaction[] listtransactions(String walletID, Long limit) throws com.bitmechanic.barrister.RpcException {
        Object _params = new Object[] { walletID, limit };
        com.bitmechanic.barrister.RpcRequest _req = new com.bitmechanic.barrister.RpcRequest(java.util.UUID.randomUUID().toString(), "sparkbit.listtransactions", _params);
        com.bitmechanic.barrister.RpcResponse _resp = this._trans.request(_req);
        if (_resp == null) {
            return null;
        }
        else if (_resp.getError() == null) {
            return (JSONRPCTransaction[])_resp.getResult();
        }
        else {
            throw _resp.getError();
        }
    }

    public JSONRPCBalance[] listbalances(String walletID, Boolean onlyVisible) throws com.bitmechanic.barrister.RpcException {
        Object _params = new Object[] { walletID, onlyVisible };
        com.bitmechanic.barrister.RpcRequest _req = new com.bitmechanic.barrister.RpcRequest(java.util.UUID.randomUUID().toString(), "sparkbit.listbalances", _params);
        com.bitmechanic.barrister.RpcResponse _resp = this._trans.request(_req);
        if (_resp == null) {
            return null;
        }
        else if (_resp.getError() == null) {
            return (JSONRPCBalance[])_resp.getResult();
        }
        else {
            throw _resp.getError();
        }
    }

    public String sendbitcoin(String walletID, String address, Double amount) throws com.bitmechanic.barrister.RpcException {
        Object _params = new Object[] { walletID, address, amount };
        com.bitmechanic.barrister.RpcRequest _req = new com.bitmechanic.barrister.RpcRequest(java.util.UUID.randomUUID().toString(), "sparkbit.sendbitcoin", _params);
        com.bitmechanic.barrister.RpcResponse _resp = this._trans.request(_req);
        if (_resp == null) {
            return null;
        }
        else if (_resp.getError() == null) {
            return (String)_resp.getResult();
        }
        else {
            throw _resp.getError();
        }
    }

}

